2025-05-20
- Added very crude WASD movement to Unity via editing the transform positions
- Learned about value types vs reference types in C#
- Tested difference in class vs struct types
- Initialized git repo and created this log

2025-05-21
- Messed around with Arrays and Lists; arrays have static position assignments, while lists have dynamic position assignments.
- Messed around with instance fields.
  - public variables are accessible by all classes, but should be avoided because variable names being available everywhere.
  - private variables require alternative access (i.e. methods)
  - Unity serialization. Unity holds on to variable values in between each script reload, which happens when editing scripts (and other times)
  - [SerializeField] forces Unity to serialize private variables. [note: whether or not Unity serializes things by default depends on variable type, but public/private is a good enough framework for now.]
    - [System.Nonserialized] does the opposite for public variables.
- Messed around with Unity components (things added on to an Object, like Transform (position), textures, lightning, etc.)
  - 2D/3D objects are just regular objects with preset components.
- Messed around with calling scripts (Monobehavior classes) and GameObjects within a script.
  - Aforementioned serialization can be used here; can call Unity objects into scripts via using a serialized field and the Unity inspector window.

2025-05-22
- Messed around with FindObjectWithTag & assigning tags in the Unity Inspector.
- Messed around with accessing parent and child objects from within a script.
- Learned that Unity uses Quaternion rotations instead of Euler rotations.
  - Look into 3blue1brown video to understand ?
- quick note: $ denotes StringFormat(), ^ denotes "last element in array" -> does not work on parent/child methods.
  - ^ the reason we use this is to avoid string concatenation, which is less optimal
- The basic objects in the 3D object dropdown are called "PrimitiveObjects."
  - They have preset components (which we can add in scripts), and can be created wholesale with a Unity method.
- Messed around with methods, parameters, arguments, and return values.
  - Used it to create and destroy objects, as well as attach death notifications to them via OnDestroy().
  - Attach said OnDestroy() methods to prefabs so that they can be used on each instance.
- Learned about the legacy InputSystem, which has a number of default parameters (axes, speed, deadspace, etc.)
  - Be very careful of typos in Axis names.

2025-05-26
- [Roulette/RouletteController.cs] Made a spinny roulette that starts & slows to a stop on separate button presses
- [PolygonTest.cs] Created a 3D object using code (vertex+triangles->mesh, mesh->meshfilter, meshrenderer)
- [TransformTest.cs] Learned about global vs local transformation, rotation, and scaling
- [EventOrder.cs] Tested out the operating order of Unity's default functions (awake, start, update, etc.) and reviewed C# operators

2025-05-27
- [Cat/LoopingBackground_Transform.cs, Cat/InfiniteBG.unity] Made an infinitely scrolling background using 2 images and moving them when they scrolled too far.
  - This created a slight tearing issue caused by the interaction between setting a specific value threshhold for resetting the image & using deltaTime to scroll the image.
  - Covered somewhat by making the images slightly bigger than the threshhold.
- Previewed bit shifting, which can be useful for calculating object states and raycasts.
- Reviewed if statements.
- [MaterialTest.cs, Material.unity] Created a fully textured object using assets, and reviewed each individual components (surface type, render face, normal map, height map, height map, ambient occlusion).
  - Also tried out manipulating components and colors using code rather than in the editor.
- [Cat/CatWalk.unity, Cat/LoopingBackground_MaterialOffset.cs] Used the material's tiling and offset to create another infinitely scrolling background.
  - Takes advantage of unity's repeat tiling feature and simply adjusts an offset instead of moving an image.
  - Also, created animations using the assets to make it look like all components are moving.

2025-05-28
- [CatCollider2D.unity, Rigidbody3D.unity, CollisionEvent2D.cs, CollisonEvent3D.cs] Created and messed around with Rigidbody (physics), Colliders (collision checks), and physics materials (bounciness/friction).
  - Colliders stop Rigidbody movement by default, even if the object being collided with doesn't have a Rigidbody of its own.
  - Colliders can be set to trigger mode (creates invisible colliders that flag events, but allow movement).
- [Cat.unity - probably going to be renamed soon]
  - Implemented a short game consisting of: a pipe respawning at a random height that can push the player character (cat) past its X position off the map.
  - [FailState_Collision.cs, CatController.cs] Cat can double jump and respawns when pushed off the map by a pipe.
  - Pipe resets when cat does. Needed to pass a reference to the pipe to the cat, is this optimal, or is there a better way to do that?

2025-05-29
- [Pinball.unity, PinballBumpers.cs] Created a simple 2D pinball game using colliders, 2D hinges, and physics materials.
  - Implemented a 3D texture onto the 2D ball to differentiate it from the other flat assets.
    - Was looking into a way to make the object emit light before I stopped.
- [AnimatedDoor.unity, DoorEvent.cs] Created a 3D animation for a scifi door asset.
  - Messed around with states in the animator to make the door open and close on a collider trigger.

2025-06-04
- [CatAnim.unity, SoundManager.cs] Added sounds to our jumping cat scene.
- Also added UI elements, including a nametag for the cat and a title screen with a button to start the game.
  - note: When using Korean text, make sure the font you're using supports all characters.
    - Some Korean font sets don't contain odd characters like ÏÄç or special characters using the hanja button.
  - Title screen button uses a simple setActive true/false trigger.
- Adjusted the pipe spawn locations so that the presence of the title screen doesn't make the first pipe unreactable.
- Also learned how to animate UI elements (like using a simple resize effect on text).

2025-06-09
- Reviewed various looping structures (while, for), conditional structures (Enum, switch), and others (co-routines)
- [CatAnim.unity, CatOffset.cs] Added rotation to cat jump to simulate up/down velocity, then added a script to keep the text from rotating with the cat.
- [FadeRoutine.cs] Used a co-routine to slowly fade the screen in and out.
- [Playtime.cs] Used a script to keep track of elapsed time and display it to an element on the screen.

2025-06-10
- Added elements to the cat game.

2025-06-11
- Used render textures to add videos to Unity.

2025-06-12
- Used the Random.math function and Lists. Made a lottery simulator with said numbers.

2025-06-13
- Studied type casting, first with basic types, then creating various classes of objects that could be used in an actual game.

2025-06-16
- Reviewed type casting.
- Studied how methods work and can be implemented, using inheritance from classes (abstract, virtual, override) and interfaces.

2025-06-23
- Created a 2D platformer-ish game using a freeware sprite.
 - Reviewed how to assign inputs and behaviors with keyboard controls, then learned about how to create a touchscreen-based movement environment (virtual joystick).

2025-06-24
- Created a 2D platformer-ish game using a freeware sprite.
 - Used Unity's blend tree function to attach attack, attack combo, jump, fall, run, crouch, and crouch walk animations to the joystick made previously.

2025-06-25
- Created a top-down 'town' map for our 2D platformer.
 - Used free pixel assets and TileMaps to create a town to walk around in.
 - Learned about Composite Colliders. Composite Colliders merge with Tilemap Colliders to create custom shapes that update with changes made to the tilemap.
 - Implemented our Joystick functions (crouch, attack) to our Keyboard knight.